// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReservationService.Storage.DbContexts;

#nullable disable

namespace ReservationService.Storage.Migrations
{
    [DbContext(typeof(PostgresContext))]
    partial class PostgresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReservationService.Common.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BookUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LibraryUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservationUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("TillDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("Id");

                    b.ToTable("Reservations", t =>
                        {
                            t.HasCheckConstraint("CHK_Reservation_Status", "\"Status\" IN ('RENTED', 'RETURNED', 'EXPIRED')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookUid = new Guid("f7cdc58f-2caf-4b15-9727-f89dcc629b27"),
                            LibraryUid = new Guid("83575e12-7ce0-48ee-9931-51919ff3c9ee"),
                            ReservationUid = new Guid("95428f22-731a-4c1c-9940-6479b25a8ade"),
                            StartDate = new DateTime(2024, 9, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "RENTED",
                            TillDate = new DateTime(2024, 9, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "Ilya"
                        },
                        new
                        {
                            Id = 2,
                            BookUid = new Guid("931984da-a1bf-4920-b0a1-3ba53b9e950c"),
                            LibraryUid = new Guid("15507b2f-8a04-4e59-b2a9-b4d9eb7f7df0"),
                            ReservationUid = new Guid("c085af6e-13bb-4c17-ba0b-408dd436eff7"),
                            StartDate = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "RENTED",
                            TillDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "Ilya"
                        },
                        new
                        {
                            Id = 3,
                            BookUid = new Guid("f7cdc58f-2caf-4b15-9727-f89dcc629b27"),
                            LibraryUid = new Guid("83575e12-7ce0-48ee-9931-51919ff3c9ee"),
                            ReservationUid = new Guid("0b1ef17b-3e4a-437b-829b-a288af63b9d5"),
                            StartDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "EXPIRED",
                            TillDate = new DateTime(2024, 9, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Username = "Pavel"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
